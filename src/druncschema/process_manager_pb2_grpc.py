# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import druncschema.request_response_pb2 as request__response__pb2


class ProcessManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.boot = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/boot',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.restart = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/restart',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.kill = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/kill',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.flush = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/flush',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.ps = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/ps',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.logs = channel.unary_stream(
                '/DUNEProcessManager.ProcessManager/logs',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.add_to_broadcast_list = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/add_to_broadcast_list',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.remove_from_broadcast_list = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/remove_from_broadcast_list',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )
        self.get_broadcast_list = channel.unary_unary(
                '/DUNEProcessManager.ProcessManager/get_broadcast_list',
                request_serializer=request__response__pb2.Request.SerializeToString,
                response_deserializer=request__response__pb2.Response.FromString,
                )


class ProcessManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def boot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def kill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flush(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_to_broadcast_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_from_broadcast_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_broadcast_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'boot': grpc.unary_unary_rpc_method_handler(
                    servicer.boot,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'restart': grpc.unary_unary_rpc_method_handler(
                    servicer.restart,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'kill': grpc.unary_unary_rpc_method_handler(
                    servicer.kill,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'flush': grpc.unary_unary_rpc_method_handler(
                    servicer.flush,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'ps': grpc.unary_unary_rpc_method_handler(
                    servicer.ps,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'logs': grpc.unary_stream_rpc_method_handler(
                    servicer.logs,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'add_to_broadcast_list': grpc.unary_unary_rpc_method_handler(
                    servicer.add_to_broadcast_list,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'remove_from_broadcast_list': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_from_broadcast_list,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
            'get_broadcast_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_broadcast_list,
                    request_deserializer=request__response__pb2.Request.FromString,
                    response_serializer=request__response__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DUNEProcessManager.ProcessManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcessManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def boot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/boot',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/restart',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/kill',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/flush',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/ps',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DUNEProcessManager.ProcessManager/logs',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_to_broadcast_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/add_to_broadcast_list',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_from_broadcast_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/remove_from_broadcast_list',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_broadcast_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DUNEProcessManager.ProcessManager/get_broadcast_list',
            request__response__pb2.Request.SerializeToString,
            request__response__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
